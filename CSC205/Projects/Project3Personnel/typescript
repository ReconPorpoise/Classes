Script started on Tue 31 Mar 2020 02:23:53 PM EDT
]0;karamuca_ra@cobra:~/Classes/CSC205/Projects/Project3Personnel[?1034h[karamuca_ra@cobra Project3Personnel]$ cat PersonnelDatabase.java 
/* Ronald Karamuca
 *
 * Implementataion class for all Employee classes
 */

import java.io.*;
import java.text.DecimalFormat;
import java.util.ArrayList;
import java.util.Scanner;

public class PersonnelDatabase implements Serializable
{
	public static ArrayList<Employee> employees = new ArrayList<Employee>(1);
	public static DecimalFormat df = new DecimalFormat("$###,###,###,###,###,###,###,###.00");		
	
	public static void main(String[] args) {
		clearScreen();
		Scanner in = new Scanner(System.in);
		System.out.println("Welcome to the Personnel Database Program!");
		System.out.println("\nPress RETURN to access the main menu...");
		in.nextLine();
		clearScreen();
		menu();
	}
	
	// main driver for the program. prints the menu with all the options and calls all methods.
	
	public static void menu() {
		String response = "";

		// Scanners for each data type to avoid Scanner issues
		Scanner in = new Scanner(System.in);
		Scanner ds = new Scanner(System.in);
		Scanner si = new Scanner(System.in);

		//.trim().toLowerCase() to strip all spaces and take any variation of the input commands
		while (!response.trim().toLowerCase().equals("q")) {
			clearScreen();
			System.out.println("----------------------------------");
            		System.out.println("| Commands: n - New employee     |");
            		System.out.println("|           c - Compute paychecks|");
            		System.out.println("|           r - Raise wages      |");
            		System.out.println("|           p - Print records    |");
            		System.out.println("|           d - Download data    |");
            		System.out.println("|           u - Upload data      |");
            		System.out.println("|           q - Quit             |");
            		System.out.println("----------------------------------");
			
			System.out.print("Enter command: ");
			response = in.nextLine();
			response = response.trim().toLowerCase();

			switch (response) {
				case "n":
					clearScreen();
					System.out.print("Enter the name of the new employee (last, first): ");
					String name = si.nextLine();
					String payType = "";
					String flag = "";
					double wage = 0;
					
					// make sure that payType is valid (h) or (s)
					while (!flag.equals("y")) {
						System.out.print("Hourly (h) or salary(s): ");
                        			payType = si.nextLine();
                        			payType = payType.trim().toLowerCase();

                        			if (payType.equals("h")) {
                            				flag = "y";
                        			}
                        			else if (payType.equals("s")) {
                            				flag = "y";
                        			}
                        			else {
                            				clearScreen();
                            				System.out.println("Input was not h or s; please try again.");
                            				System.out.println("\nPress RETURN to continue...");
							si.nextLine();
                            				clearScreen();
	                       			}					
						// if (h) make it do the hourly wage with HourlyEmployee
						if (payType.equals("h")) {
							wage = 0;
							while (true) {
								System.out.print("Enter hourly wage: ");
								try {
									wage = Double.parseDouble(si.nextLine());
									break;
								} catch (NumberFormatException ignore) {
									System.out.println("Wage was not in double form; try again.");
								}
							}
							HourlyEmployee newEmp = new HourlyEmployee(name, wage);
							employees.add(newEmp);
						}
						// if (s) make it do the salary with SalariedEmployee 
						if (payType.equals("s")) {
						        wage = 0;
							while (true) {
								System.out.print("Enter salary: ");
								try {
									wage = Double.parseDouble(si.nextLine());
									break;
								} catch (NumberFormatException ignore) {
									System.out.println("Wage was not in double form; try again.");
								}
							}
							SalariedEmployee newEmp = new SalariedEmployee(name, wage);
							employees.add(newEmp);
						}
					}	
					clearScreen();
					System.out.println("Employee added.\n\nPress RETURN to continue...");
					in.nextLine();
					break;
				case "c":
					for (int i = 0; i < employees.size(); i++) {
						// go through the ArrayList of employees and check if it's an Hourly or Salary
						if (employees.get(i) instanceof HourlyEmployee) {
							// hTemp is a temporary HourlyEmployee
							HourlyEmployee hTemp = (HourlyEmployee) employees.get(i);
							double hoursWorked = 0.00;
							while (true) {
								// Keep asking for hours if it's not in double form
								System.out.println("\nEnter the number of hours worked by " + hTemp.getName() + ": ");
								try {
									hoursWorked = Double.parseDouble(si.nextLine());
									break;
								} catch (NumberFormatException ignore) {
									System.out.println("Hours worked was not in double form; try again.");
								}
							}
							System.out.println("Pay: " + df.format(hTemp.computePay(hTemp.getWage(), hoursWorked)));
						}
						// if employee is salary then do it with Salaried.
						else if (employees.get(i) instanceof SalariedEmployee) {	
							// sTemp is a temporary SalariedEmployee
							SalariedEmployee sTemp = (SalariedEmployee) employees.get(i);
							double hoursWorked = 0.00;
							while (true) {
								System.out.print("\nEnter the number of hours worked by " + sTemp.getName() + ": ");
								try {
									hoursWorked = Double.parseDouble(si.nextLine());
									break;
								} catch (NumberFormatException ignore) {
									System.out.println("Hours worked was not in double form; try again.");
								}
							}
							System.out.println("Pay: " + df.format(sTemp.computePay(sTemp.getWage(), hoursWorked))); 
						}	
					}
					System.out.println("\nPress RETURN to continue...");
					in.nextLine();
					break;
				case "r":
					// Keeps asking for percentage increase until the user gives a double
					double increase = 0.00;
					while (true) {
						System.out.print("Enter percentage increase: ");
						try {
							increase = Double.parseDouble(si.nextLine());
							break;
						} catch (NumberFormatException ignore) {
							System.out.println("Increase percentage was not in double form; try again.");
						}
					}
					clearScreen();

					// print new wages based upon if it's Hourly or Salaried
					System.out.println("New Wages");
					System.out.println("---------");
					for (int i = 0; i < employees.size(); i++) {
						if (employees.get(i) instanceof HourlyEmployee) {
							HourlyEmployee rTemp = (HourlyEmployee) employees.get(i);
							rTemp.raiseWage(rTemp.getWage(), increase);
							System.out.println(rTemp.toString(rTemp));
						}
						else if (employees.get(i) instanceof SalariedEmployee) {
							SalariedEmployee rTemp = (SalariedEmployee) employees.get(i);
							rTemp.raiseWage(rTemp.getSalary(), increase);
							rTemp.setSalary(rTemp, rTemp.getWage());
							System.out.println(rTemp.toString(rTemp));
						}	
					}
					System.out.println("\n\nPress RETURN to continue...");
					in.nextLine();
					break;
				case "p":
					// print all employee records using .toString based upon Hourly or Salary
					clearScreen();
					System.out.println("Here are all employee records:");
					System.out.println("----------------------------------------");
					for (int i = 0; i < employees.size(); i++) {
						if (employees.get(i) instanceof HourlyEmployee) {
							HourlyEmployee pTemp = (HourlyEmployee) employees.get(i);
							System.out.println(pTemp.toString(pTemp));
						}
						else if (employees.get(i) instanceof SalariedEmployee) {
							SalariedEmployee pTemp = (SalariedEmployee) employees.get(i);
							System.out.println(pTemp.toString(pTemp));
						}
					}
					System.out.println("----------------------------------------");
					System.out.println("\nPress RETURN to continue...");
					in.nextLine();
					break;
				case "d":
					// calls the objOut for the ArrayList<Employee> to download all records to employee.dat
					clearScreen();
					System.out.println("Downloading Records...");
					objOut(employees);
					System.out.println("\nPress RETURN to continue...");
					in.nextLine();
					break;
				case "u":
					// calls the objIn for ArrayList<Employee> to upload employees from employee.dat
					clearScreen();
					System.out.println("Uploading Records...");
					objIn(employees);
					System.out.println("Employees have been added.\n\nPress RETURN to continue...");
					in.nextLine();
					break;
				case "q":
					// close all scanners and print a thank you message + a reminder
					in.close();
					ds.close();
					si.close();
					clearScreen();
					System.out.println("Thank you for using the Personnel Database Program.");
					System.out.println("\nIf you downloaded employee data, remember to check the 'employee.dat' file.");
					break;
				default:
					// if it's not a valid command, tell the user
					clearScreen();
					System.out.println("Command was not recognized; please try again.");
                   			System.out.println("\nPress RETURN to continue...");
                    			in.nextLine();
                    			clearScreen();
                    			break;	
			}	
		}
	}

	public static void objOut(ArrayList<Employee> emps) {
		// output the data to the file unless there is an IOException
		try {
			FileOutputStream fileOut = new FileOutputStream("employee.dat");
			ObjectOutputStream out = new ObjectOutputStream(fileOut); 
			for (int i = 0; i < emps.size(); i++) {
				out.writeObject(emps.get(i));
			}
			out.close();
			fileOut.close();
			System.out.println("Download successful.\n\nData was saved to 'employee.dat'.");
		} catch (IOException i) {
			i.printStackTrace();
		}
	} 

	public static ArrayList<Employee> objIn(ArrayList<Employee> emps) {
		// creates a iostream for employee.dat
		String fileName = "employee.dat";
		Employee newE = null;
		try {
			// while it has next, check if null. If not, add to the list.
			// if it catches IOException return the list as is
			FileInputStream fileIn = new FileInputStream(fileName);
			ObjectInputStream inTo = new ObjectInputStream(fileIn);
			Scanner readFile = new Scanner("employee.dat");
			while (readFile.hasNext() != false) {
				newE = (Employee) inTo.readObject();
				if (newE != null) {
					emps.add(newE);
				}
			}
			readFile.close();
			inTo.close();
		}
		catch (IOException e) {
			return emps;
		}
		catch (ClassNotFoundException e) {
			System.out.println(e.getMessage());
		}
		return emps;
	}
	
	// clears the terminal screen
	public static void clearScreen() {
		System.out.println("\u001b[H\u001b[2J");
	}
}
]0;karamuca_ra@cobra:~/Classes/CSC205/Projects/Project3Personnel[karamuca_ra@cobra Project3Personnel]$ cat HourlyEmployee.java 
/* Ronald Karamuca
 *
 * Class that defines what an HourlyEmployee is and how it operates with pay and formatting
 */
import java.io.*;
import java.text.DecimalFormat;

public class HourlyEmployee extends Employee implements java.io.Serializable
{
    public DecimalFormat df = new DecimalFormat("###,###,###,###,###,###,###,###,###.00");
   
    // calls Employees protected constructor to create the HourlyEmployee because there is nothing new
    public HourlyEmployee(String name, double wage) {
        super(name, wage);
    }

    // computes pay with overtime: if over 40 hours, calculate base pay * 40 + remainder * (wage * 1.5).
    public double computePay(double wage, double hoursWorked) {
        if (hoursWorked <= 40) {
            return (wage * hoursWorked);
        }
        else
        {
            return (((hoursWorked - 40) * (wage * 1.5)) + (40 * wage));
        }
    }
    
    // toString cuts the name and last name at the " ", then makes the last name 0, space - 1 to avoid the ","
    // it appends these two together to make one "fullName" string then calls getWage on the object to make the pay part
    // The for loop is used to calculate the number of spaces needed in between the name and pay, to create an exactly-40 character output
    public String toString(HourlyEmployee worker) {
	int space = worker.getName().indexOf(" ");
			
	String first = worker.getName().substring(space + 1, worker.getName().length());
	String last = worker.getName().substring(0, space - 1);
	String wage = "$" + df.format(worker.getWage()) + "/hour";
	String fullName = last + ", " + first;
	int numSpaces = 40 - (fullName.length() + wage.length());
		
	String toReturn = fullName;
	for (int j = 0; j < numSpaces; j++) {
		toReturn += " ";
	}
	toReturn += wage;
	
	return toReturn;
   }	
}
]0;karamuca_ra@cobra:~/Classes/CSC205/Projects/Project3Personnel[karamuca_ra@cobra Project3Personnel]$ cat SalariedEmployee.java 
/* Ronald Karamuca
 *
 * Defines what a SalariedEmployee is and how it operates.
 */

import java.io.*;
import java.text.DecimalFormat;

public class SalariedEmployee extends Employee implements java.io.Serializable
{
    private double salary = 0.00;
    public DecimalFormat df = new DecimalFormat("###,###,###,###,###,###,###,###,###.00");

    // calls super as well as defines its own salary variable, which is unique to SalariedEmployee
    public SalariedEmployee(String name, double annualSalary) {
        super(name, (annualSalary / (52 * 40)));
        salary = annualSalary;
    }

    public double getSalary() {
        return salary;
    }
 
    // setSalary not only has to redefine salary, but also the Employee class' wage.
    // This is why we call setWage(newSalary / (52 * 40)). This converts it to an hourly wage.
    public void setSalary(Employee worker, double newSalary) {
        salary = newSalary;
        worker.setWage(newSalary / (52 * 40));
    }

    // assumes 40 hour work weeks because SalariedEmployees don't get OT
    public double computePay(double wage, double hoursWorked) {
        return (wage * 40);
    }

    // same concept as the HourlyEmployee toString, this time using getSalary for the pay
    public String toString(SalariedEmployee worker) {
        int space = worker.getName().indexOf(" ");

        String first = worker.getName().substring(space + 1, worker.getName().length());
        String last = worker.getName().substring(0, space - 1);
        String salary = "$" + df.format(worker.getSalary()) + "/year";

        String fullName = last + ", " + first;
        int numSpaces = 40 - (fullName.length() + salary.length());

        String toReturn = fullName;
        for (int i = 0; i < numSpaces; i++) {
            toReturn += " ";
        }
        toReturn += salary;

        return toReturn;
    }
}


]0;karamuca_ra@cobra:~/Classes/CSC205/Projects/Project3Personnel[karamuca_ra@cobra Project3Personnel]$ cat Employee.java 
/* Ronald Karamuca. 
 *
 * Main Employee Class of the Personnel Database Program.
 * This is where the base class is created to make most of the program work.
 */

import java.io.*;

// Class is abstract because subclasses implement the same behavior
public abstract class Employee implements java.io.Serializable
{
    private String name;
    private double hourlyWage;
    
    // Protected constructor can only be seen by subclasses
    protected Employee(String newName, double newWage) {
        name = newName;
        hourlyWage = newWage;
    }
    
    // getters and setters for names/wages
    public String getName() {
        return name;
    }

    public double getWage() {
        return hourlyWage;
    }

    public void setName(String newName) {
        name = newName;
    }

    public void setWage(double newWage) {
        hourlyWage = newWage;
    }

    // raise wage calculates the new wage by multiplying the original by 1 + (percentage in decimal form). 
    // This is to take care of the "adding back in" step all in one go
    public void raiseWage(double wage, double percentage) {
		double newWage = wage * (1 + (percentage / 100));
		setWage(newWage);
    }

    // compute pay isn't used by employee, but is very important for Salary and Hourly to implement, hence abstract
    public abstract double computePay(double wage, double hoursWorked);
}
]0;karamuca_ra@cobra:~/Classes/CSC205/Projects/Project3Personnel[karamuca_ra@cobra Project3Personnel]$ java PersonnelDatabase.[K
[H[2J
Welcome to the Personnel Database Program!

Press RETURN to access the main menu...

[H[2J
[H[2J
----------------------------------
| Commands: n - New employee     |
|           c - Compute paychecks|
|           r - Raise wages      |
|           p - Print records    |
|           d - Download data    |
|           u - Upload data      |
|           q - Quit             |
----------------------------------
Enter command: test
[H[2J
Command was not recognized; please try again.

Press RETURN to continue...

[H[2J
[H[2J
----------------------------------
| Commands: n - New employee     |
|           c - Compute paychecks|
|           r - Raise wages      |
|           p - Print records    |
|           d - Download data    |
|           u - Upload data      |
|           q - Quit             |
----------------------------------
Enter command: 123
[H[2J
Command was not recognized; please try again.

Press RETURN to continue...

[H[2J
[H[2J
----------------------------------
| Commands: n - New employee     |
|           c - Compute paychecks|
|           r - Raise wages      |
|           p - Print records    |
|           d - Download data    |
|           u - Upload data      |
|           q - Quit             |
----------------------------------
Enter command: n
[H[2J
Enter the name of the new employee (last, first): Plumber, Phil
Hourly (h) or salary(s): daily
[H[2J
Input was not h or s; please try again.

Press RETURN to continue...

[H[2J
Hourly (h) or salary(s): 123
[H[2J
Input was not h or s; please try again.

Press RETURN to continue...

[H[2J
Hourly (h) or salary(s): h
Enter hourly wage: 49 0.00
[H[2J
Employee added.

Press RETURN to continue...

[H[2J
----------------------------------
| Commands: n - New employee     |
|           c - Compute paychecks|
|           r - Raise wages      |
|           p - Print records    |
|           d - Download data    |
|           u - Upload data      |
|           q - Quit             |
----------------------------------
Enter command: n
[H[2J
Enter the name of the new employee (last, first): Coder, Carol
Hourly (h) or salary(s): s
Enter salary: 80000
[H[2J
Employee added.

Press RETURN to continue...

[H[2J
----------------------------------
| Commands: n - New employee     |
|           c - Compute paychecks|
|           r - Raise wages      |
|           p - Print records    |
|           d - Download data    |
|           u - Upload data      |
|           q - Quit             |
----------------------------------
Enter command: c

Enter the number of hours worked by Plumber, Phil: 
seventy
Hours worked was not in double form; try again.

Enter the number of hours worked by Plumber, Phil: 
50
Pay: $2,200.00

Enter the number of hours worked by Coder, Carol: 
50
Pay: $1,538.46

Press RETURN to continue...

[H[2J
----------------------------------
| Commands: n - New employee     |
|           c - Compute paychecks|
|           r - Raise wages      |
|           p - Print records    |
|           d - Download data    |
|           u - Upload data      |
|           q - Quit             |
----------------------------------
Enter command: r
Enter percentage increase: four point five
Increase percentage was not in double form; try again.
Enter percentage increase: 4.5
[H[2J
New Wages
---------
Plumber, Phil                $41.80/hour
Coder, Carol             $83,600.00/year


Press RETURN to continue...

[H[2J
----------------------------------
| Commands: n - New employee     |
|           c - Compute paychecks|
|           r - Raise wages      |
|           p - Print records    |
|           d - Download data    |
|           u - Upload data      |
|           q - Quit             |
----------------------------------
Enter command: p
[H[2J
Here are all employee records:
----------------------------------------
Plumber, Phil                $41.80/hour
Coder, Carol             $83,600.00/year
----------------------------------------

Press RETURN to continue...

[H[2J
----------------------------------
| Commands: n - New employee     |
|           c - Compute paychecks|
|           r - Raise wages      |
|           p - Print records    |
|           d - Download data    |
|           u - Upload data      |
|           q - Quit             |
----------------------------------
Enter command: d
[H[2J
Downloading Records...
Download successful.

Data was saved to 'employee.dat'.

Press RETURN to continue...

[H[2J
----------------------------------
| Commands: n - New employee     |
|           c - Compute paychecks|
|           r - Raise wages      |
|           p - Print records    |
|           d - Download data    |
|           u - Upload data      |
|           q - Quit             |
----------------------------------
Enter command: q
[H[2J
Thank you for using the Personnel Database Program.

If you downloaded employee data, remember to check the 'employee.dat' file.
]0;karamuca_ra@cobra:~/Classes/CSC205/Projects/Project3Personnel[karamuca_ra@cobra Project3Personnel]$ 
]0;karamuca_ra@cobra:~/Classes/CSC205/Projects/Project3Personnel[karamuca_ra@cobra Project3Personnel]$ java PersonnelDatabase
[H[2J
Welcome to the Personnel Database Program!

Press RETURN to access the main menu...
p 
[H[2J
[H[2J
----------------------------------
| Commands: n - New employee     |
|           c - Compute paychecks|
|           r - Raise wages      |
|           p - Print records    |
|           d - Download data    |
|           u - Upload data      |
|           q - Quit             |
----------------------------------
Enter command: p
[H[2J
Here are all employee records:
----------------------------------------
----------------------------------------

Press RETURN to continue...

[H[2J
----------------------------------
| Commands: n - New employee     |
|           c - Compute paychecks|
|           r - Raise wages      |
|           p - Print records    |
|           d - Download data    |
|           u - Upload data      |
|           q - Quit             |
----------------------------------
Enter command: u
[H[2J
Uploading Records...
Employees have been added.

Press RETURN to continue...

[H[2J
----------------------------------
| Commands: n - New employee     |
|           c - Compute paychecks|
|           r - Raise wages      |
|           p - Print records    |
|           d - Download data    |
|           u - Upload data      |
|           q - Quit             |
----------------------------------
Enter command: p
[H[2J
Here are all employee records:
----------------------------------------
Plumber, Phil                $41.80/hour
Coder, Carol             $83,600.00/year
----------------------------------------

Press RETURN to continue...

[H[2J
----------------------------------
| Commands: n - New employee     |
|           c - Compute paychecks|
|           r - Raise wages      |
|           p - Print records    |
|           d - Download data    |
|           u - Upload data      |
|           q - Quit             |
----------------------------------
Enter command: q
[H[2J
Thank you for using the Personnel Database Program.

If you downloaded employee data, remember to check the 'employee.dat' file.
]0;karamuca_ra@cobra:~/Classes/CSC205/Projects/Project3Personnel[karamuca_ra@cobra Project3Personnel]$ exit
exit

Script done on Tue 31 Mar 2020 02:25:18 PM EDT
