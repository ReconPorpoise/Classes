Script started on Wed 07 Oct 2020 07:56:12 PM EDT
]0;karamuca_ra@cobra:~/Classes/CSC245/Projects/prog2[?1034h[karamuca_ra@cobra prog2]$ cat testBet.cpp 
/*
 * Ronald Karamuca
 * Project 2: The Binary Expression Tree
 */

#include <iostream>
#include <algorithm>
#include <string>
#include "bet.h"
using namespace std;

BET postBuild( string input);
BET preBuild( string input );
BET inBuild( string input );
bool precedence( char prevOp, char currOp );
void printMenu();
void print( BET tree );

int main() 
{
	// Gives the menu options for the program
	printMenu();

	// Asks the user if they'd like to restart the program, then error checks input
	char answer = 'y';
	string again = "";
	
	// Runs until user decides to quit, then a deconstruct message appears
	while( answer != 'n' ) {
		cout << "\n\n\nWould you like to build another tree? (y/n): ";
		cin >> again;
		if( again.length() > 1 ) {
			while( again.length() > 1 ) {
				system( "clear" );
				cout << "Invalid input, try again." << endl;
				cout << "Would you like to build another tree? (y/n): ";
				cin >> again;
			}
		}	
		char answer = again[ 0 ];
		if( tolower( answer ) == 'y' ) {
			system("clear");
			printMenu();
		}
		if( tolower( answer ) == 'n' ) {
			system( "clear" );
			cout << "Program now dconstructing tree & exiting..." << endl;
			break;
		}
	}
	
	return 0;
}

BET postBuild( string input )
{
	// If it's an operator, add it to the BET as a Postfix operator, else add it as an operand
	BET tree = BET();
	for( int i = 0; i < input.length(); i++ ) {
		if( input[ i ] == '+' || input[ i ] == '-' || input[ i ] == '*' || 
			input[ i ] == '/' ) {
			tree.insertPostfixOperator( input[ i ] );
		}
		else {
			tree.insertOperand( input[ i ] );
		}
	}
	return tree;
}

BET preBuild( string input ) 
{
	// If it's an operator, add it to the BET as a Prefix operator, else add it as an operand
	BET tree = BET();
	for( int i = input.length() - 1; i >= 0; i-- ) {
		if( input[ i ] == '+' || input[ i ] == '-' || input[ i ] == '*' || 
			input[ i ] == '/' ) {
			tree.insertPrefixOperator( input[ i ] );
		}
		else {
			tree.insertOperand( input[ i ] );
		}
	}
	return tree;
}

BET inBuild( string input ) 
{
	// Create a stack to hold infix values, to be converted to postfix
	Stack<char> s;
	string postfix = "";
	char curr;

	/*
	int lcounter = 0;
	int rcounter = 0;

	for( int i = 0; i < input.length(); i++ ) {
		if( input[ i ] == '(' )
			lcounter++;
		if( input[ i ] == ')' )
			rcounter++;
	}
	
	while( rcounter > lcounter ) {
		input = '(' + input;
		lcounter++;
	}

	while( lcounter > rcounter ) {
		input += ')';
		rcounter++;
	}
	*/

	// Add surrounding parenthesis to make looping easier
	input = '(' + input;
	input += ')';

	// For each character in the expression...
	for( int i = 0; i < input.length(); i++ ) {
		curr = input[ i ];
		// push opening parenthesis to stack
		if( curr == '(' ) {
			s.push( curr );
		}
		// if it's an operator, see if it's less than or equal to the top of the stack operator.
		else if( curr == '+' || curr == '-' || curr == '*' || curr == '/' ) {
			while( precedence( s.top(), curr ) ) {
				// while it's the lowest operator, pop the operators in the stack, then push the operator to the stack.
				postfix += s.top();
				s.pop();
			}
			s.push( curr );
		}
		// if you encounter a closing parenthesis, pop all symbols until you hit '(', then pop that.
		else if( curr == ')' ) {
			while( s.top() != '(' ) {
				postfix += s.top();
				s.pop();
			}
			s.pop();
		}
		// if it's an operand, just add it to the postfix expression.
		else {
			postfix += curr;
		}
	}
	return( postBuild( postfix ) );
}

bool precedence( char prevOp, char currOp )
{
	// If the current operand is of equal value to the one in the stack... return true
	if( ( prevOp == '*' || prevOp == '/' ) && ( currOp == '*' || currOp == '/'  ) ) {
		return true;
	}
	if( ( prevOp == '+' || prevOp == '-' ) && ( currOp == '+' || currOp == '-'  ) ) {
		return true;
	}
	// If the current operand is of less value than the one in the stack... return true
	if( ( prevOp == '*' || prevOp == '/' ) && ( currOp == '+' || currOp == '-'  ) ) {
		return true;
	}
	else {
		return false;
	}
}

void printMenu() 
{
	int type;
	string expression;

	cout << "---------- Building Binary Expression Trees ----------" << endl;
	cout << "      (1) Prefix      (2) Infix      (3) Postfix      " << endl;
	
	cout << "\nYour Expression Type: ";		
	cin >> type;
	cout << "Your Expression: ";			
	cin.ignore();
	getline( cin, expression );

	expression.erase( remove( expression.begin(), expression.end(), ' ' ), expression.end() );

	cout << endl;

	// Calls for the preorder, inorder, and postorder expressions to be printed based upon the user's original input.
	// This is to avoid unwanted deconstruction of the BET if it goes out of scope.
	if( type == 1 ) {
		print( preBuild( expression ) );
	}
	else if( type == 2 ) {
		print( inBuild( expression ) );
	}
	else if( type == 3 ) {
		print( postBuild( expression ) );
	}
}

void print( BET tree )
{
	// Prints the converted trees in a decent format 
	cout << "Preorder Expression Produced from Tree:\n"; tree.preorder(); cout << endl;
	cout << "\nInorder Expression Produced from Tree:\n"; tree.inorder(); cout << endl;
	cout << "\nPostorder Expression Produced from Tree:\n"; tree.postorder(); cout << endl;
}	
]0;karamuca_ra@cobra:~/Classes/CSC245/Projects/prog2[karamuca_ra@cobra prog2]$ cat bet.cpp 
#include <iostream>
#include "bet.h"

using namespace std;

BET::BET()
{
    root = NULL;
}

BET::~BET()
{
    makeEmpty( root );
}

bool BET::isEmpty() const 
{
    return( root == NULL );
}

void BET::makeEmpty() 
{
    makeEmpty( root );
}

void BET::makeEmpty( BETPtr& t ) const 
{
    if( t != NULL ) {
        makeEmpty( t -> left );
        makeEmpty( t -> right );
		delete t;
		t = NULL;
    }
}

void BET::insertPrefixOperator( char token )
{
	// If you need a prefix operator, the top of the stack is the left and the second from the top is the right because
	// prefix prints then goes left all the way then right all the way. 
	BETPtr op = new BinaryNode;

	op->left = s.top();		s.pop();
	op->right = s.top();	s.pop();

	// Gets type of OPERATOR and opsymbol (unique to operators) because it is an operator
	op->info.whichType = OPERATOR;
	op->info.theContent.opsymbol = token;
	
	// all operators become root because the last operator should be the root node
	s.push( op );   
	root = op;
}

void BET::insertPostfixOperator( char token )
{
	// Postfix goes left right then print, so top needs to be the second (right) node.
    BETPtr op = new BinaryNode;
    
	op->right = s.top();	s.pop();
	op->left = s.top();		s.pop();
	
	op->info.whichType = OPERATOR;
	op->info.theContent.opsymbol = token;

	s.push( op );
	root = op;
}

void BET::insertOperand( char token )
{
	// Gets OPERAND type and variable instead of opsymbol
    BETPtr op = new BinaryNode;

	op->info.whichType = OPERAND;
	op->info.theContent.variable = token;

	// give it null children then push to stack
	op->left = NULL;
	op->right = NULL;

    s.push( op );
}

void BET::preorder() const 
{
    preorder( root );
}

void BET::preorder( BETPtr t ) const 
{
	// Print the proper union variable based upon it's type, then go left recursively then right recursively
	if( t == NULL )
		return;
	
	if( t->info.whichType == OPERAND ) 
		cout << t->info.theContent.variable << " ";
	if( t->info.whichType == OPERATOR )
		cout << t->info.theContent.opsymbol << " ";
	
	preorder( t->left );
	preorder( t->right );
}

void BET::inorder() const
{
    inorder( root );
}

void BET::inorder( BETPtr t ) const
{
	// If the left child is a null (all the way left), add an open parenthesis. Go recursively left, then print based upon the type, then go recursively right.
	// When you've gone all the way right, add a closing parenthesis
	if( t == NULL )
		return;
	
	if( t->left != NULL )
		cout << "( ";
	inorder( t->left );
	
	if( t->info.whichType == OPERAND ) 
		cout << t->info.theContent.variable << " ";
	if( t->info.whichType == OPERATOR )
		cout << t->info.theContent.opsymbol << " ";
	
	inorder( t->right );
	if( t->right != NULL )
		cout << ") ";
}

void BET::postorder() const
{
    postorder( root );
}

void BET::postorder( BETPtr t ) const
{
	// Go left recursively then right recursively, then print the proper union variable based upon it's type.
	if( t == NULL )
		return;
	
	postorder( t->left );
	postorder( t->right );
	
	if( t->info.whichType == OPERAND ) 
		cout << t->info.theContent.variable << " ";
	if( t->info.whichType == OPERATOR )
		cout << t->info.theContent.opsymbol << " ";
}]0;karamuca_ra@cobra:~/Classes/CSC245/Projects/prog2[karamuca_ra@cobra prog2]$ c++ testBet.cpp net.o[K[K[K[K[Kbet.o
]0;karamuca_ra@cobra:~/Classes/CSC245/Projects/prog2[karamuca_ra@cobra prog2]$ ./a.out 
---------- Building Binary Expression Trees ----------
      (1) Prefix      (2) Infix      (3) Postfix      

Your Expression Type: 1
Your Expression: *+a   + a - / b c d * e + fg

Preorder Expression Produced from Tree:
* + a - / b c d * e + f g 

Inorder Expression Produced from Tree:
( ( a + ( ( b / c ) - d ) ) * ( e * ( f + g ) ) ) 

Postorder Expression Produced from Tree:
a b c / d - + e f g + * * 



Would you like to build another tree? (y/n): y
[3;J[H[2J---------- Building Binary Expression Trees ----------
      (1) Prefix      (2) Infix      (3) Postfix      

Your Expression Type: 2
Your Expression: ((((a-b) + c  ) * ((d+e) / f )  )) - g )  )

Preorder Expression Produced from Tree:
- * + - a b c / + d e f g 

Inorder Expression Produced from Tree:
( ( ( ( a - b ) + c ) * ( ( d + e ) / f ) ) - g ) 

Postorder Expression Produced from Tree:
a b - c + d e + f / * g - 



Would you like to build another tree? (y/n): y
[3;J[H[2J---------- Building Binary Expression Trees ----------
      (1) Prefix      (2) Infix      (3) Postfix      

Your Expression Type: 3
Your Expression: ab+c/d& *

Preorder Expression Produced from Tree:
* / + a b c d 

Inorder Expression Produced from Tree:
( ( ( a + b ) / c ) * d ) 

Postorder Expression Produced from Tree:
a b + c / d * 



Would you like to build another tree? (y/n): n
[3;J[H[2JProgram now dconstructing tree & exiting...
]0;karamuca_ra@cobra:~/Classes/CSC245/Projects/prog2[karamuca_ra@cobra prog2]$ exit
exit

Script done on Wed 07 Oct 2020 07:57:47 PM EDT
