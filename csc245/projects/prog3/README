----------------------------
Project 3: Encoding/Decoding
----------------------------

ENCODING
=============================================================================================================
The encoding table for "MERCER TENNIS" would be:
10 
10 1010
32 1011
67 1100
69 00
73 1101
77 1110
78 011
82 100
83 1111
84 010
and the zipped/compressed file would look like:
111000100110000100101101000011011110111111010

BUILDING THE TREE
=============================================================================================================
The Huffman tree for this example would be first broken down into a forest of all letter frequencies.
In this case, the frequencies would be 1M 3E 2R 1C 1T 2N 1I 1S 1sp 1nl.
First, two of the smallest frequencies should be merged. nl and sp will be merged, which would create a 
total node of 2. Then, the same happens for C/I and M/S, with total nodes T2 and T3 also equal to 2.
Next, T and N get merged, creating T4 of 3, leaving the E and R. The E is 3 and R is 2, so E can become
the sibling of T4 and R can be the sibling of T3. Next, R and T3 are merged to create T5 with 4, as does
T1 and T2 to form T6. T4 and E are merged to create T7 which is 6, then T6 and T5 are merged to form T8 of 8.
Lastly, T8 and T7 are merged to create a T9 of 14.

METHODS FOR HUFFMAN TREE
=============================================================================================================
Using the given Huffman.h header file, accomplishing this task should be quite intuitive. Using insert,
a character with it's weight/frequency can be added into the Huffman tree. This takes care of the merging 
as well as the inital weights and additions to the tree. GetCode will return the compressed code of a 
given character using recursion. This, as well as the GetFrequency method, can help create the final encoded
file. Once the file is encoded, PrintTable will show the user how each character was encoded by printing
the full encoding table. 
